// Generated by CoffeeScript 1.3.1
(function() {

  describe("Paginator", function() {
    beforeEach(function() {
      return this.paginator = new window.SKB.Paginator({
        itemList: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        itemsPerPage: 5
      });
    });
    describe("when instantiated", function() {
      it("should contain an 'itemList' property", function() {
        (expect(this.paginator.itemList)).toBeDefined();
        return (expect(this.paginator.itemList)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
      });
      it("should contain an 'itemsPerPage' property", function() {
        return (expect(this.paginator.itemsPerPage)).toBeDefined();
      });
      return it("should contain a 'currentPageNumber' property", function() {
        return (expect(this.paginator.currentPageNumber)).toBeDefined();
      });
    });
    describe("setters/getters", function() {
      it("should set the 'itemList' property", function() {
        this.paginator.setItemList([1, 2, 3]);
        return (expect(this.paginator.itemList)).toEqual([1, 2, 3]);
      });
      it("should set the 'itemsPerPage' property", function() {
        this.paginator.setItemsPerPage(9);
        return (expect(this.paginator.itemsPerPage)).toEqual(9);
      });
      it("should set the 'currentPageNumber' property", function() {
        this.paginator.setCurrentPageNumber(3);
        return (expect(this.paginator.currentPageNumber)).toEqual(3);
      });
      it("should get the 'itemList' property", function() {
        this.paginator.setItemList([1, 2, 3, 4, 5]);
        return (expect(this.paginator.getItemList())).toEqual([1, 2, 3, 4, 5]);
      });
      it("should get the 'itemsPerPage' property", function() {
        this.paginator.setItemsPerPage(12);
        return (expect(this.paginator.getItemsPerPage())).toEqual(12);
      });
      return it("should get the 'currentPageNumber' property", function() {
        this.paginator.setCurrentPageNumber(2);
        return (expect(this.paginator.getCurrentPageNumber())).toEqual(2);
      });
    });
    return describe("pages", function() {
      beforeEach(function() {
        var _i, _results;
        return this.paginator = new window.SKB.Paginator({
          itemList: (function() {
            _results = [];
            for (_i = 1; _i < 34; _i++){ _results.push(_i); }
            return _results;
          }).apply(this),
          itemsPerPage: 6
        });
      });
      it("should get the total number of pages", function() {
        return (expect(this.paginator.getNumberOfPages())).toEqual(6);
      });
      it("should get a page by number", function() {
        (expect(this.paginator.getPage(1))).toEqual([1, 2, 3, 4, 5, 6]);
        return (expect(this.paginator.getPage(3))).toEqual([13, 14, 15, 16, 17, 18]);
      });
      it("should change the currentPageNumber when getting a page", function() {
        this.paginator.setCurrentPageNumber(2);
        this.paginator.getPage(4);
        return (expect(this.paginator.getCurrentPageNumber())).toEqual(4);
      });
      it("should get the current page", function() {
        this.paginator.setCurrentPageNumber(2);
        return (expect(this.paginator.getCurrentPage())).toEqual([7, 8, 9, 10, 11, 12]);
      });
      it("should get the previous page", function() {
        this.paginator.setCurrentPageNumber(2);
        return (expect(this.paginator.getPreviousPage())).toEqual([1, 2, 3, 4, 5, 6]);
      });
      it("should get the next page", function() {
        this.paginator.setCurrentPageNumber(2);
        return (expect(this.paginator.getNextPage())).toEqual([13, 14, 15, 16, 17, 18]);
      });
      it("should decrement the currentPageNumber when it gets the previous page", function() {
        this.paginator.setCurrentPageNumber(2);
        this.paginator.getPreviousPage();
        return (expect(this.paginator.getCurrentPageNumber())).toEqual(1);
      });
      it("should increment the currentPageNumber when it gets the next page", function() {
        this.paginator.setCurrentPageNumber(2);
        this.paginator.getNextPage();
        return (expect(this.paginator.getCurrentPageNumber())).toEqual(3);
      });
      it("should not get the previous page if on the first page", function() {
        this.paginator.setCurrentPageNumber(1);
        return (expect(this.paginator.getPreviousPage())).toBeFalsy();
      });
      it("should not get the next page if on the last page", function() {
        this.paginator.setCurrentPageNumber(6);
        return (expect(this.paginator.getNextPage())).toBeFalsy();
      });
      it("should be truthy if on the first page", function() {
        this.paginator.setCurrentPageNumber(1);
        return (expect(this.paginator.isFirstPage())).toBeTruthy();
      });
      it("should be truthy if on the last page", function() {
        this.paginator.setCurrentPageNumber(6);
        return (expect(this.paginator.isLastPage())).toBeTruthy();
      });
      it("should be falsy if NOT on the first page", function() {
        this.paginator.setCurrentPageNumber(3);
        return (expect(this.paginator.isFirstPage())).toBeFalsy();
      });
      return it("should be falsy if NOT on the last page", function() {
        this.paginator.setCurrentPageNumber(3);
        return (expect(this.paginator.isLastPage())).toBeFalsy();
      });
    });
  });

}).call(this);
